class Solution {
    public int longestNiceSubarray(int[] nums) {
        int left = 0; // Start of the sliding window
        int bitMask = 0; // Keeps track of OR of elements in the window
        int maxLength = 0; // Stores the longest nice subarray length

        for (int right = 0; right < nums.length; right++) {
            // If adding nums[right] causes conflict, remove from the left
            while ((bitMask & nums[right]) != 0) {
                bitMask ^= nums[left]; // Remove leftmost element
                left++; // Shrink the window from the left
            }

            bitMask |= nums[right]; // Add the current element
            maxLength = Math.max(maxLength, right - left + 1); // Update max length
        }

        return maxLength; // Return the longest valid subarray length
    }
}
